name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    env:
      Solution_Name: SimpleRest                      # Replace with your solution name, e.g., MyWpfApp.sln.
      Test_Project_Path: SimpleRest.Tests              # Replace with the path to your test project, e.g., MyWpfApp.Tests/MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name  # Replace with the Wap project directory relative to the solution, e.g., MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                 # Replace with the path to your Wap project, e.g., MyWpfApp.Package/MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core SDK (supports all platforms)
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Conditionally add MSBuild on Windows only
    - name: Setup MSBuild.exe
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    #- name: Execute unit tests
     # run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    # Restore the application
    - name: Restore the application
      run: dotnet restore ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    # Decode and save the signing certificate on Windows only
    - name: Decode the pfx
      if: matrix.os == 'windows-latest'
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build and package only on Windows (for WAP projects)
    - name: Create the app package
      if: matrix.os == 'windows-latest'
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx file after use on Windows
    - name: Remove the pfx
      if: matrix.os == 'windows-latest'
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the build artifact if created (on Windows only)
    - name: Upload build artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    # Generate documentation (Linux only, adjust path as needed)
    - name: Generate Docs
      if: matrix.os == 'ubuntu-latest'
      run: "/home/theexiledcat/simplerest.net/gendocs.sh"
